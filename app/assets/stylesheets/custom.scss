@import "bootstrap-sprockets";
@import "bootstrap";

/* mixins, variables, etc. */
$gray-medium-light: #eaeaea;

/* universal */
body {
  padding-top: 60px;
  background-position: center center;
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-size: cover;
  background-color: white;
}

body.main {
  position: relative;
  padding-top: 60px;
  background-image: url(/main_back_image.png);
  background-position: center center;
  background-repeat: no-repeat;
  background-attachment: fixed;
  background-size: cover;
  background-color: #464646;
  overflow: scroll;
  height: 100vh;
}

section {
  overflow: auto;
}

textarea {
  resize: vertical;
}

.center {
  text-align: center;
  position: relative;
  h1 {
    margin-bottom: 10px;
  }
}

/* typography */
h1, h2, h3, h4, h5, h6 {
  line-height: 1;
}

h1 {
  font-size: 3em;
  letter-spacing: -2px;
  margin-bottom: 30px;
  text-align: center;
}

h2 {
  font-size: 1.2em;
  letter-spacing: -1px;
  margin-bottom: 30px;
  text-align: center;
  font-weight: normal;
  color: $gray-light;
}

p {
  font-size: 1.1em;
  line-height: 1.7em;
}


/* header */
#logo {
  float: left;
  margin-right: 10px;
  font-size: 1.7em;
  color: white;
  text-transform: uppercase;
  letter-spacing: -1px;
  padding-top: 9px;
  font-weight: bold;
  &:hover {
    color: white;
    text-decoration: none;
  }
}

/* footer */
footer {
  margin-top: 45px;
  padding-top: 5px;
  border-top: 1px solid $gray-medium-light;
  color: $gray-light;
  a {
    color: $gray;
    &:hover {
      color: $gray-darker;
    }
  }
  small {
    float: left;
  }
  ul {
    float: right;
    list-style: none;
    li {
      float: left;
      margin-left: 15px;
    }
  }
}

@mixin box_sizing {
　-moz-box-sizing:    border-box;
  -webkit-box-sizing: border-box;
  box-sizing:         border-box;
}

/* sidebar */
aside {
  section.user_info {
    margin-top: 20px;
    background: rgba(255,255,255,0.6);
  }
  section {
    padding: 10px 0;
    margin-top: 20px;
    &:first-child {
      border: 0;
      padding-top: 0;
    }
    span {
      display: block;
      margin-bottom: 3px;
      line-height: 1;
    }
    h1 {
      font-size: 1.4em;
      text-align: left;
      letter-spacing: -1px;
      margin-bottom: 3px;
      margin-top: 0px;
    }
  }
}

.gravatar {
  float: left;
  margin-top: 5px;
  margin-right: 10px;
  margin-left: 10px;
}

.gravatar_edit {
  margin-top: 15px;
}

.stats {
  overflow: auto;
  margin-top: 5px;
  padding: 0;
  a {
    float: left;
    padding: 0 10px;
    border-left: 1px solid $gray-lighter;
    color: gray;
    &:first-child {
      padding-left: 0;
      border: 0;
    }
    &:hover {
      text-decoration: none;
      color: blue;
    }
  }
  strong {
    display: block;
  }
}

.user_avatars {
  overflow: auto;
  margin-top: 10px;
  .gravatar {
    margin: 1px 1px;
  }
  a {
    padding: 0;
  }
}

.users.follow {
  padding: 0;
}

/* forms */
input, textarea, select, .uneditable-input {
  border: 1px solid #bbb;
  width: 100%;
  margin-bottom: 15px;
  @include box_sizing;
}

input {
  height: uto !important;
}

/* forms */
#error_explanation {
  color: red;
  ul {
    color: red;
    margin: 0 0 30px 0;
  }
}

.field_with_errors {
  @extend .has-error;
  .form-control {
    color: $state-danger-text;
  }
}

.checkbox {
  margin-top: -10px;
  margin-bottom: 10px;
  span {
    margin-left: 20px;
    font-weight: normal;
  }
}

#session_remember_me {
  width: auto;
  margin-left: 0;
}

#user_follow_notification {
  width: auto;
  margin-left: 0;
}

/* Users index */
.users {
  list-style: none;
  margin: 0;
  li {
    overflow: auto;
    padding: 10px 0;
    border-bottom: 1px solid #333333;
  }
}

/* microposts */
.microposts {
  list-style: none;
  padding: 0;
  li {
    padding: 10px 0;
    border-bottom: 1px solid #333333;
  }
  .user {
    margin-top: 5em;
    padding-top: 0;
  }
  .content {
    display: block;
    margin-left: 60px;
    img {
      display: block;
      padding: 5px 0;
    }
  }
  .timestamp {
    color: $gray-light;
    display: block;
    margin-left: 60px;
  }
  .gravatar {
    float: left;
    margin-right: 10px;
    margin-top: 5px;
  }
}

aside {
  textarea {
    height: 100px;
    margin-bottom: 5px;
  }
}

span.picture {
  margin-top: 10px;
    color:white;
  input {
    border: 0;
  }
}

.search_form {
  overflow: auto;
  margin: 10px;
  float: right;
  .input-group {
    width: 300px;
    .form-control {
      width: 250px;
      height:39px;
    }
    .btn {
      width: 50px;
    }
  }
}


/* tabs */
.nav-tabs a {
  font-size: 21px;
}

/* talks */
.talks {
  list-style: none;
  a:hover {
    text-decoration: none;
  }
  li {
      border-bottom: 1px solid #333333;
    a {
      display: block;
      padding: 10px 0;
    }
  }
  .title {
    color: black;
    margin-top: 5em;
    padding-top: 0;
  }
  .content {
    color: black;
    display: block;
    min-height: 20px;
    margin-left: 60px;
  }
  .timestamp {
    color: $gray-light;
    display: block;
    margin-left: 60px;
  }
  .delete {
    float: right;
  }
  .gravatar {
    float: left;
    margin-right: 10px;
    margin-top: 15px;
  }
}

/* dmessages */
.dmessages {
  list-style: none;
  padding: 0;
  li {
    padding: 5px;
  }
  .balloon {
    padding: 10px 15px;
    border: solid 1px #000000;
    margin: 0 70px;
  }
  .balloon-left {
    border-radius: 0 20px 20px 20px / 0 20px 20px 20px;
  }
  .balloon-right {
    border-radius: 20px 0 20px 20px / 20px 0 20px 20px;
  }
  .user {
    margin-top: 5em;
    padding-top: 0;
  }
  .content {
    color: black;
    display: block;
    word-wrap:break-word;
  }
  .timestamp {
    color: $gray-light;
    display: block;
  }
  .delete {
    float: right;
  }
  .gravatar-left {
    float: left;
    margin-right: 10px;
  }
  .gravatar-right {
    float: right;
    margin-right: 0;
  }
}

/* dmessage form */
.dmessage-form {
  height: 80px;
  margin: 10px 0;
  padding: 10px 70px 0 70px;
  border-top: 1px solid #bbbbbb;
  &:after {
    display: block;
    content: "";
    clear: both;
  }
  .field {
    float: left;
    width: 85%;
  }
  .content {
    height: 70px;
    margin-bottom: 0;
  }
  .btn {
    float: left;
    width: 15%;
    height: 100% !important;
  }
}

#dmessagetitle {
  font-size: 1.2em;
  font-weight: bold;
}

/* レイアウト、デザイン調整 */
.btn-primary {
  background: rgba(0,0,64,0.5); //ボタンの背景色
  color: white; //ボタンのテキストの色
  transition: all 0.3s;
}

//bootstrapの仕様を上書き
.btn-primary:hover, .btn-primary:focus, 
.btn-primary:active, .btn-primary:active:focus, .btn-primary:active:hover, .btn-primary:active.focus,
.btn-primary.active, .btn-primary.active:focus, .btn-primary.active:hover, .btn-primary.active.focus,
.open > .dropdown-toggle.btn-primary, 
.open > .dropdown-toggle.btn-primary:hover,
.open > .dropdown-toggle.btn-primary:focus, 
.open > .dropdown-toggle.btn-primary.focus,
.btn-primary.disabled:hover, .btn-primary[disabled]:hover, fieldset[disabled] .btn-primary:hover,
.btn-primary.disabled:focus, .btn-primary[disabled]:focus, fieldset[disabled] .btn-primary:focus,
.btn-primary.disabled.focus, .btn-primary[disabled].focus, fieldset[disabled] .btn-primary.focus {
  background: rgba(0,0,64,0.8); //ボタンの上にポインタを持ってきたり、クリックしたりした時の背景色
  color: #FFD700; //ボタンの上にポインタを持ってきたり、クリックしたりした時のテキストの色
  letter-spacing: 2px;
}

.btn-primary.outline {
  border: 3px solid rgba(0,0,64,0.5); //アウトラインのみのボタンの線の色
  color: white; //アウトラインのみのボタンのテキストの色
  transition: all 0.3s;
}

.navbar {
  color:#fff;
}

.top {
  color: rgba(255,255,255,0.7);
  font-weight: bold;
  font-size: 120px;
  z-index: 1;
  position: absolute;
  top: 43%;
  left: 50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
}

.subtitle {
  color: rgb(255,255,255);
  font-weight: bold;
  font-size: 50px;
  text-shadow: 0.2px 0.2px 0 #000000,-0.2px 0.2px 0 #000000,0.2px -0.2px 0 #000000,-0.2px -0.2px 0 #000000;
}

.sentence {
  color: rgb(255,255,255);
  font-weight: bold;
  font-size: 25px;
}

.ligu_logo {
  width: 25%;
  height: auto; 
}

ul.logo {
  display: flex;
  justify-content: center;
  align-items: center;
  list-style: none;
}

.color {
  color:white;
  text-shadow: 0.2px 0.2px 0 #000000,-0.2px 0.2px 0 #000000,0.2px -0.2px 0 #000000,-0.2px -0.2px 0 #000000;
}

.color2 {
  color:black;
  padding-bottom:3px;
  padding-top:3px;
}

.color2position {
  padding-left:10px;
}

.linkcolor {
  color:#FFFF00;
&:hover {
    color: #FFD700;
  }
}

#linkcolor {
  color:#FFFF00;
  &:hover {
    color: #FFD700;
    }
}

.ulbackcolor {
  background: rgba(255,255,255,0.7);
}

.ulerrorbackcolor {
  background: #FFE4E1;
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
}

.lierror {
  margin-left:30px;
}

.unfollowbtn {
  color:white;
  background: rgba(0,0,64,0.5);
  border: 1px solid #008BBB; 
&:hover {
    color: #FFD700;
    transition: all 0.3s;
    background: rgba(0,0,64,0.8);
    letter-spacing: 2px;
  }
}

.likebtn {
  background-color: rgba(255,255,255,0);
  border-style: none;
  &:hover {
    background-color: rgba(255,255,255,0);
    border-style: none;
  }
  &:active {
    background-color: rgba(255,255,255,0);
    border-style: none;
  }
}

.color-red {
 color: red;
}

/* popup.js */
//独自関数を定義(Sass(SCSS)の機能)
//変数→先頭$で定義
//関数、return、if、for→先頭@で定義
//@mixin→引数を使うことができる。初期値を設定しておくことも可能。※@includeで呼び出さないと使えない
//map-get($map,$key)→$mapの中から$keyに対応した値を取得
//map-merge($map1,$map2)→$map1と$map2の 2 つの map をマージ
//ピースやピースの破片たちはページが表示された段階で、hidden状態で存在

//ピースの速度
$pieceAT: 0.7s;
//コンテンツエリアの速度
$contentFadeAT: 0.2s;

//独自関数
@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

//ピース1つ1つにランダム性を持たせる
@mixin shatteredPopup($inRow: 6, $inCol: 6) {
  //コンテンツエリアを6×6に分割
  $pieces: $inRow * $inCol;
  $heights: ();
  $hTotal: 100;

  //ピースごとにランダムな高さを算出
  @for $i from 1 through $inCol {
    $h: 100 / $inCol;
    $hVal: $h * 0.7 + floor(random($h*0.6));

    @if $i == $inCol {
      $hVal: $hTotal;
    }

    $hTotal: $hTotal - $hVal;
    $heights: map-set($heights, $i, $hVal);
    
    $widths: ();
    $wTotal: 100;
    
    //ピースごとにランダムな幅を算出
    @for $j from 1 through $inRow {
      $w: 100 / $inRow;
      $wVal: $w * 0.7 + floor(random($w*0.6));

      @if $j == $inRow {
        $wVal: $wTotal;
      }

      $wTotal: $wTotal - $wVal;
      $widths: map-set($widths, $j, $wVal);
    }

    //通常、プロパティの値にしか使用できないが、#{}と組み合わせることでセレクタやプロパティ名にも使うことができる
    $heights: map-set($heights, 'widths-#{$i}', $widths);
  }

  $k: 4;

  //ピース1つ1つの3Dの動き
  @for $i from 1 through $pieces {
    .popup_piece:nth-child(#{$i}) {
      $indexH: ceil($i / $inCol);
      $pieceH: map-get($heights, $indexH);
      height: percentage($pieceH / 100);

      $indexW: $i % $inRow + 1;
      $pieceW: map-get(map-get($heights, 'widths-#{$indexH}'), $indexW);

      width: percentage($pieceW / 100);

      $pieceX: percentage((30 + random(40)) / 100);

      @for $j from 1 through 3 {
        .popup_piece-inner:nth-child(#{$j}) {
          $x: (-60 + random(120)) * 1vw;
          $y: (-60 + random(120)) * 1vh;
          $z: (900 - random(1800)) * 1px;
          $rtX: 120deg + random(360deg);
          $rtY: 120deg + random(360deg);
          
          transform: translate3d($x, $y, $z) rotateX($rtX) rotateY($rtY);
          
          @if $j == 1 {
            clip-path: polygon(0 0, 0 100%, $pieceX 100%);
          }
          
          @if $j == 2 {
            clip-path: polygon(0 0, $pieceX 100%, 100% 0);
          }
          
          @if $j == 3 {
            clip-path: polygon(100% 0, 100% 100%, $pieceX 100%);
          }
        }
      }
    }
    
    //閉じるボタン押下後のピースの破片の動き
    //translate3d→要素を 3D 空間内で再配置
    &.s--closed .popup_piece:nth-child(#{$i}) {
      $rndPieceY: (100 + random(50)) * 1vh;
      
      transform: translate3d(0,$rndPieceY,0);
      
      @for $j from 1 through 3 {
        .popup_piece-inner:nth-child(#{$j}) {
          $x: (-80 + random(160)) * 1vw;
          $z: (900 - random(1800)) * 1px;
          $rtX: 120deg + random(360deg);
          $rtY: 120deg + random(360deg);
          
          transform: translate3d($x, 0, 0) rotateX($rtX) rotateY($rtY);
        }
      }
    }
  }
}

//ポップアップの表示位置を調整
.popups-cont {
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: -10;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100vh;
  perspective: 1000px;
  pointer-events: none;
  transition: z-index 0s $contentFadeAT/2 + $pieceAT;
  
  //ポップアップ出現後、最前面へ
  &.s--popup-active {
    z-index: 1000;
    pointer-events: auto;
    transition: z-index 0s 0s;
  }
}

.popup {
  z-index: 2;
  position: relative;
  width: 500px;
  height: 490px;
  transform-style: preserve-3d;
  //ランダムな動きをインクルード
  @include shatteredPopup;

  //pieceの集合体(コンテンツエリア)
  &_pieces {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }

  //6×6のpiece
  &_piece {
    float: left;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0s 0s;
    
    .popup.s--closed & {
      transition: transform $pieceAT $contentFadeAT/2 cubic-bezier(.69,-0.47,.97,1.04);
    }

    &:after {
      content: "";
      display: table;
      clear: both;
    }

    //pieceの破片
    &-inner {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,64,0.8);
      opacity: 0;
      transition: opacity $pieceAT/2 * 0.8 $pieceAT/2 + $contentFadeAT ease-in, transform $pieceAT $contentFadeAT/2 ease-out;

      .popup.s--active & {
        transition: opacity $pieceAT/2, transform $pieceAT ease-in-out;
        transform: translate3d(0,0,0) rotateX(0) rotateY(0) !important;
        opacity: 1;
      }
    }
  }

  //コンテンツエリアと文字
  &_content {
    position: relative;
    min-height: 500px;
    padding: 30px;
    background: #000033;
    color: #fff;
    transition: opacity $contentFadeAT;
    opacity: 0;

    .popup.s--active & {
      transition-delay: $pieceAT - $contentFadeAT/2;
      opacity: 1;
    }
  }

  //閉じるボタン
  &_close {
    position: absolute;
    right: 30px;
    top: 30px;
    width: 30px;
    height: 30px;
    cursor: pointer;
    
    &:before,
    &:after {
      content: '';
      position: absolute;
      left: 0;
      top: 14px;
      width: 100%;
      height: 2px;
      background: #fff;
    }
    
    //右肩上がりの線
    &:before {
      transform: rotate(45deg);
    }
    
    //右肩下がりの線
    &:after {
      transform: rotate(-45deg);
    }
  }
  
  &_text {
    font-size: 20px;
    line-height: 1.5;
    font-weight: bolder;
  }
}

.popup-btn {
  width: 190px;
  height: 40px;
  outline: none;
  font-size: 18px;
  font-weight: bold;
  border: 0.5px solid #003399;
  transition: all 0.3s;
  cursor: pointer;
  background: rgba(0,0,80,0.5); //ボタンの背景色
  color: white; //ボタンのテキストの色
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  
  &:hover {
  border: 0.5px solid #003399;
  letter-spacing: 2px;
  background: rgba(0,0,64,0.8); //ボタンの上にポインタを持ってきたり、クリックしたりした時の背景色
  color: #FFD700; //ボタンの上にポインタを持ってきたり、クリックしたりした時のテキストの色
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  }
}

.btntextsize {
    font-size: 18px;
}

/* swiper.min.js */
.swiper-container {
  margin-left: auto;
  margin-right: auto;
  position: relative;
  overflow: hidden;
  list-style: none;
  padding: 0;
  z-index: -1;
}

/* rollsraid.js */
.sraidcontainer {
  margin: 0 auto;
  width: 275px;
  height: 280px;
  position: relative;
  //3D変形の奥行きの深さを指定する
  perspective: 1000px;
}

.carousel {
  height: 25%;
  width: 82%;
  position: absolute;
  //フラット化されずに3D空間の中でのそれらの位置を維持
  transform-style: preserve-3d;
  transition: transform 1s;
}

.item {
  display: block;
  position: absolute;
  line-height: 200px;
  opacity: 0.95;
}

.a {
  //Y軸を軸とする角度によって時計回りの回転を指定
  //Z方向の距離で移動を指定
  transform: rotateY(0deg) translateZ(250px);
}
.b {
  transform: rotateY(60deg) translateZ(250px);
}
.c {
  transform: rotateY(120deg) translateZ(250px);
}
.d {
  transform: rotateY(180deg) translateZ(250px);
}
.e {
  transform: rotateY(240deg) translateZ(250px);
} 
.f {
  transform: rotateY(300deg) translateZ(250px);
}

.snext, .sprev {
  color: rgba(0,0,64,0.5);
  position: absolute;
  top: 510px;
  padding: 1em 2em;
  background: rgba(0,0,64,0.5);
  border-radius: 5px;
  border-top: 1px solid rgba(0,0,64,0.5);
  box-shadow: 0 5px 0 rgba(0,0,64,0.9);
  transition: box-shadow 0.1s, top 0.1s;
}

.snext:hover, .sprev:hover {
  color: #FFD700; 
}

.snext:active, .sprev:active {
  top: 514px;
  box-shadow: 0 1px 0 rgba(0,0,64,0.9);
}

.snext { right: 5em;
  color: white;
  font-weight: bolder;
}

.sprev { left: 5em;
  color: white;
  font-weight: bolder;
}

/* accordionsraid.js */
.options {
  display:flex;
  min-width:360px;
  max-width:300px;
  height:300px;
      
  .option {
    position: relative;
    // 表示方法
    overflow:hidden;
    min-width:30px;
    margin:2px;
    background:var(--optionBackground);
    background-size:auto 120%;
    background-position:center;
    // タイミング関数
    transition:.5s cubic-bezier(0.05, 0.61, 0.41, 0.95);

      &.active {
        // フレックスコンテナ内のアイテムの伸び方の比率
        flex-grow:10000;
        transform:scale(1);
        max-width:500px;
        margin:0px;
        border-radius:4px;
        background-size:auto 100%;
          .shadow {
            box-shadow:inset 0 -120px 120px -120px black, inset 0 -120px 120px -100px black;
          }
          .label {
            bottom:7px;
            left:3px;
              // 親要素の直接の子要素に適用されるセレクタ            
              .info >div {
                left:0px;
                opacity:1;
              }
          }
      }

      // 非activeの時のlabel
      &:not(.active) {
        .label {
          bottom:5px;
          left:-10px;
          .info >div {
            left:20px;
            opacity:0;
          }
        }
      }

      .shadow {
        position: absolute;
        bottom:0px;
        left:0px;
        right:0px;
        height:50px;
        transition:.5s cubic-bezier(0.05, 0.61, 0.41, 0.95);
      }

      .label {
        display:flex;
        position: absolute;
        right:0px;
        height:40px;
        transition:.5s cubic-bezier(0.05, 0.61, 0.41, 0.95);
          .icon {
            display:flex;
            flex-direction:row;
            justify-content:center;
            align-items:center;
            min-width:40px;
            max-width:40px;
            height:40px;
            border-radius:100%;
            background-color:white;
          }
          .info {
            display:flex;
            flex-direction:column;
            justify-content:center;
            margin-left:10px;
            color:white;
              >div {
                position: relative;
                //ゆっくり終わる
                transition:.5s cubic-bezier(0.05, 0.61, 0.41, 0.95), opacity .5s ease-out;
              }
              .main {
                font-weight:bold;
                font-size:1.2rem;
              }
               .sub {
                transition-delay:.1s;
              }
          }
      }
  }
} 

.fa_text {
  font-size:30px;
  color:black;
}

.momtitle {
  font-size:20px;
  color:white;
}

/* anime.js */
.welcomeanime {
  font-weight: 1000;
  font-size: 1.7em;
  text-transform: uppercase;
  letter-spacing: 0.5em;
}

.welcomeanime .word {
  margin-top:35px;
  display: inline-block;
  line-height: 0.2em;
  color:#FFD700;
}

.animeleft {
  text-align: left;
}

/* anime2.js */
h1.updateanime {
  font-weight: 900;
  font-size: 2.5em;
  color: #fff;
  width: 8em;
  height: 6em;
}

.updateanime .letters-container {
  position: absolute;
  left: 0;
  right: 0;
  margin: auto;
  top: 0;
  bottom: 0;
  height: 2.5em;
}

.updateanime .letters {
  position: relative;
  z-index: 2;
  display: inline-block;
  line-height: 0.7em;
  right: -0.12em;
  top: -0.2em;
}

.updateanime .bang {
  font-size: 1.4em;
  top: 0.2em;
  left: 0em;
}

.updateanime .circle {
  position: absolute;
  left: 0;
  right: 0;
  margin: auto;
  top: 0;
  bottom: 0;
}

.updateanime .circle-white {
  width: 6em;
  height: 6em;
  border: 2px dashed white;
  border-radius: 5em;
}

.updateanime .circle-dark {
  width: 5em;
  height: 5em;
  background-color: #FFD700;
  border-radius: 4em;
  z-index: 1;
}

.updateanime .circle-dark-dashed {
  border-radius: 2.8em;
  background-color: transparent;
  border: 2px dashed #FFD700;
  width: 5.4em;
  height: 5.4em;
}

/* anime3.js */
.talkanime {
  color: #FFD700;
  font-weight: 900;
  font-size: 2.1em;
  text-transform: uppercase;
  letter-spacing: 0.5em;
  overflow: hidden;
}

.talkanime .letter {
  display: inline-block;
  line-height: 1.5em;
}

.slidetextposition {
  height:500px;
  transform: rotateY(0deg) translateZ(250px);
}

.divuserinfo {
  padding-top:10%;
}

.divuserinfo2 {
  padding-top:5%;
}

.divuserinfoname {
 padding-top:10%;
 margin-left:30%;
}

.divshareduserinfo {
  padding-top:3%;
}

.talksposition {
 padding-right:5%;
}

.serchposition {
 padding-bottom:5%;
}

.imgposition {
 padding-bottom:1%;
}